@page "/admin/companies"
@using MiNegocio.Client.Shared.Interfaces
@using MiNegocio.Shared.Dto.Request
@using MiNegocio.Shared.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService
@inject IJSRuntime js

<h3>Company Management</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateCompanyModal">Add New Company</button>
</div>

@if (companies == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading companies...</p>
    </div>
}
else if (!companies.Any())
{
    <div class="alert alert-info">
        No companies found. Create your first company to get started.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Created</th>
                    <th>Users</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var company in companies)
                {
                    <tr>
                        <td>@company.Id</td>
                        <td>@company.Name</td>
                        <td>@company.Address</td>
                        <td>@company.Phone</td>
                        <td>@company.Email</td>
                        <td>@company.CreatedAt.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-primary">@company.Users.Count</span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditCompany(company)" title="Edit">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCompany(company)" title="Delete">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Create Company Modal -->
@if (showCreateCompanyModal)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Company</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateCompanyModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newCompany" OnValidSubmit="@CreateCompany">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="company-name" class="form-label">Name:</label>
                            <InputText id="company-name" class="form-control" @bind-Value="newCompany.Name" />
                            <ValidationMessage For="@(() => newCompany.Name)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="company-address" class="form-label">Address:</label>
                            <InputText id="company-address" class="form-control" @bind-Value="newCompany.Address" />
                            <ValidationMessage For="@(() => newCompany.Address)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="company-phone" class="form-label">Phone:</label>
                            <InputText id="company-phone" class="form-control" @bind-Value="newCompany.Phone" />
                            <ValidationMessage For="@(() => newCompany.Phone)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="company-email" class="form-label">Email:</label>
                            <InputText id="company-email" class="form-control" @bind-Value="newCompany.Email" />
                            <ValidationMessage For="@(() => newCompany.Email)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Company</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Company Modal -->
<Component />
@code {
    private List<Company> companies = new();
    private bool showCreateCompanyModal = false;
    private bool showEditCompanyModal = false;
    private bool isSubmitting = false;
    private CreateCompanyRequest newCompany = new();
    private Company? editingCompany;
    private CreateCompanyRequest editCompanyRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            companies = await AdminService.GetAllCompaniesAsync();
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void ShowCreateCompanyModal()
    {
        newCompany = new CreateCompanyRequest();
        showCreateCompanyModal = true;
    }

    private void HideCreateCompanyModal()
    {
        showCreateCompanyModal = false;
    }

    private async Task CreateCompany()
    {
        isSubmitting = true;
        try
        {
            var result = await AdminService.CreateCompanyAsync(newCompany);
            if (result != null)
            {
                showCreateCompanyModal = false;
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void EditCompany(Company company)
    {
        editingCompany = company;
        editCompanyRequest = new CreateCompanyRequest
        {
            Name = company.Name,
            Address = company.Address,
            Phone = company.Phone,
            Email = company.Email
        };
        showEditCompanyModal = true;
    }

    private void HideEditCompanyModal()
    {
        showEditCompanyModal = false;
    }

    private async Task UpdateCompany()
    {
        isSubmitting = true;
        try
        {
            if (editingCompany != null)
            {
                var result = await AdminService.UpdateCompanyAsync(editingCompany.Id, editCompanyRequest);
                if (result != null)
                {
                    showEditCompanyModal = false;
                    await LoadData();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteCompany(Company company)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete company {company.Name}?"))
        {
            try
            {
                var success = await AdminService.DeleteCompanyAsync(company.Id);
                if (success)
                {
                    await LoadData();
                }
                else
                {
                    await js.InvokeAsync<string>("alert", "Cannot delete company with associated users.");
                }
            }
            catch (Exception ex)
            {
                // Handle error
            }
        }
    }
}
