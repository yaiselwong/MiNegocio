@page "/admin/users"
@using MiNegocio.Client.Shared.Interfaces
@using MiNegocio.Shared.Dto.Request
@using MiNegocio.Shared.Models
@using Microsoft.AspNetCore.Authorization

@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService

<h3>User Management</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateUserModal">Add New User</button>
</div>

@if (users == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading users...</p>
    </div>
}
else if (!users.Any())
{
    <div class="alert alert-info">
        No users found. Create your first user to get started.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Company</th>
                    <th>Created</th>
                    <th>Last Login</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>
                            <span class="badge @(user.Role == UserRole.Admin ? "bg-danger" : "bg-primary")">
                                @user.Role
                            </span>
                        </td>
                        <td>@user.Company?.Name ?? "N/A"</td>
                        <td>@user.CreatedAt.ToShortDateString()</td>
                        <td>@(user.LastLoginAt?.ToShortDateString() ?? "Never")</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(user)" title="Edit">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-warning" @onclick="() => ShowResetPasswordModal(user)" title="Reset Password">
                                    <span class="oi oi-lock-locked"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(user)" title="Delete">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Create User Modal -->
@if (showCreateUserModal)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateUserModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newUser" OnValidSubmit="@CreateUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username:</label>
                            <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
                            <ValidationMessage For="@(() => newUser.Username)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="newUser.Email" />
                            <ValidationMessage For="@(() => newUser.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="newUser.Password" />
                            <ValidationMessage For="@(() => newUser.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="role" class="form-label">Role:</label>
                            <InputSelect id="role" class="form-select" @bind-Value="newUser.Role">
                                <option value="@UserRole.Admin">Admin</option>
                                <option value="@UserRole.SystemUser">System User</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="company" class="form-label">Company:</label>
                            <InputSelect id="company" class="form-select" @bind-Value="newUser.CompanyId">
                                <option value="">None</option>
                                @foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create User</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit User Modal -->
@if (showEditUserModal && editingUser != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="HideEditUserModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editUserRequest" OnValidSubmit="@UpdateUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="edit-username" class="form-label">Username:</label>
                            <InputText id="edit-username" class="form-control" @bind-Value="editUserRequest.Username" />
                            <ValidationMessage For="@(() => editUserRequest.Username)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="edit-email" class="form-label">Email:</label>
                            <InputText id="edit-email" class="form-control" @bind-Value="editUserRequest.Email" />
                            <ValidationMessage For="@(() => editUserRequest.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="edit-role" class="form-label">Role:</label>
                            <InputSelect id="edit-role" class="form-select" @bind-Value="editUserRequest.Role">
                                <option value="@UserRole.Admin">Admin</option>
                                <option value="@UserRole.SystemUser">System User</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="edit-company" class="form-label">Company:</label>
                            <InputSelect id="edit-company" class="form-select" @bind-Value="editUserRequest.CompanyId">
                                <option value="">None</option>
                                @foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Updating...</span>
                            }
                            else
                            {
                                <span>Update User</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Reset Password Modal -->
@if (showResetPasswordModal && resettingUser != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reset Password</h5>
                    <button type="button" class="btn-close" @onclick="HideResetPasswordModal"></button>
                </div>
                <div class="modal-body">
                    <p>Reset password for user: <strong>@resettingUser.Username</strong></p>

                    <EditForm Model="@resetPasswordRequest" OnValidSubmit="@ResetPassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="new-password" class="form-label">New Password:</label>
                            <InputText type="password" id="new-password" class="form-control" @bind-Value="resetPasswordRequest.NewPassword" />
                            <ValidationMessage For="@(() => resetPasswordRequest.NewPassword)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="confirm-password" class="form-label">Confirm Password:</label>
                            <InputText type="password" id="confirm-password" class="form-control" @bind-Value="confirmPassword" />
                            @if (!string.IsNullOrEmpty(confirmPassword) && confirmPassword != resetPasswordRequest.NewPassword)
                            {
                                <div class="text-danger">Passwords do not match</div>
                            }
                        </div>

                        <button type="submit" class="btn btn-warning" disabled="@isSubmitting || confirmPassword != resetPasswordRequest.NewPassword">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Resetting...</span>
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private List<Company> companies = new();
    private bool showCreateUserModal = false;
    private bool showEditUserModal = false;
    private bool showResetPasswordModal = false;
    private bool isSubmitting = false;
    private CreateUserRequest newUser = new();
    private User? editingUser;
    private UpdateUserRequest editUserRequest = new();
    private User? resettingUser;
    private ResetPasswordRequest resetPasswordRequest = new();
    private string confirmPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            users = await AdminService.GetAllUsersAsync();
            companies = await AdminService.GetAllCompaniesAsync();
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void ShowCreateUserModal()
    {
        newUser = new CreateUserRequest();
        showCreateUserModal = true;
    }

    private void HideCreateUserModal()
    {
        showCreateUserModal = false;
    }

    private async Task CreateUser()
    {
        isSubmitting = true;
        try
        {
            var result = await AdminService.CreateUserAsync(newUser);
            if (result != null)
            {
                showCreateUserModal = false;
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void EditUser(User user)
    {
        editingUser = user;
        editUserRequest = new UpdateUserRequest
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email,
            Role = user.Role,
            CompanyId = user.CompanyId
        };
        showEditUserModal = true;
    }

    private void HideEditUserModal()
    {
        showEditUserModal = false;
    }

    private async Task UpdateUser()
    {
        isSubmitting = true;
        try
        {
            var result = await AdminService.UpdateUserAsync(editUserRequest);
            if (result != null)
            {
                showEditUserModal = false;
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ShowResetPasswordModal(User user)
    {
        resettingUser = user;
        resetPasswordRequest = new ResetPasswordRequest();
        confirmPassword = string.Empty;
        showResetPasswordModal = true;
    }

    private void HideResetPasswordModal()
    {
        showResetPasswordModal = false;
    }

    private async Task ResetPassword()
    {
        isSubmitting = true;
        try
        {
            var success = await AdminService.ResetPasswordAsync(resettingUser!.Id, resetPasswordRequest.NewPassword);
            if (success)
            {
                showResetPasswordModal = false;
                // Show success message
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteUser(User user)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user {user.Username}?"))
        {
            try
            {
                var success = await AdminService.DeleteUserAsync(user.Id);
                if (success)
                {
                    await LoadData();
                }
            }
            catch (Exception ex)
            {
                // Handle error
            }
        }
    }
}
