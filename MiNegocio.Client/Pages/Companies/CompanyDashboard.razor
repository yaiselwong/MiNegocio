@page "/company-dashboard"
@using MiNegocio.Client.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SystemUser")]
@inject ICompanyDataService CompanyDataService

<h3>Panel de Control de Empresa</h3>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <h5 class="card-title">Almacenes</h5>
                <p class="card-text">Gestiona los almacenes de tu empresa</p>
                <div class="d-flex justify-content-between align-items-center">
                    <span class="display-4">@warehouseCount</span>
                    <a href="/company-dashboard/warehouses" class="btn btn-light">Gestionar</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-success text-white">
            <div class="card-body">
                <h5 class="card-title">Categorías</h5>
                <p class="card-text">Organiza tus productos por categorías</p>
                <div class="d-flex justify-content-between align-items-center">
                    <span class="display-4">@categoryCount</span>
                    <a href="/company-dashboard/categories" class="btn btn-light">Gestionar</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-info text-white">
            <div class="card-body">
                <h5 class="card-title">Unidades de Medida</h5>
                <p class="card-text">Configura las unidades para tus productos</p>
                <div class="d-flex justify-content-between align-items-center">
                    <span class="display-4">@unitCount</span>
                    <a href="/company-dashboard/units-of-measure" class="btn btn-light">Gestionar</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Resumen de Actividad</h5>
        <div class="row">
            <div class="col-md-6">
                <h6>Elementos Activos</h6>
                <ul class="list-unstyled">
                    <li>Almacenes activos: <span class="badge bg-success">@activeWarehouses</span></li>
                    <li>Categorías activas: <span class="badge bg-success">@activeCategories</span></li>
                    <li>Unidades activas: <span class="badge bg-success">@activeUnits</span></li>
                </ul>
            </div>
            <div class="col-md-6">
                <h6>Elementos Inactivos</h6>
                <ul class="list-unstyled">
                    <li>Almacenes inactivos: <span class="badge bg-secondary">@inactiveWarehouses</span></li>
                    <li>Categorías inactivas: <span class="badge bg-secondary">@inactiveCategories</span></li>
                    <li>Unidades inactivas: <span class="badge bg-secondary">@inactiveUnits</span></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private int warehouseCount = 0;
    private int categoryCount = 0;
    private int unitCount = 0;
    private int activeWarehouses = 0;
    private int activeCategories = 0;
    private int activeUnits = 0;
    private int inactiveWarehouses = 0;
    private int inactiveCategories = 0;
    private int inactiveUnits = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var warehouses = await CompanyDataService.GetWarehousesAsync();
            var categories = await CompanyDataService.GetCategoriesAsync();
            var units = await CompanyDataService.GetUnitsOfMeasureAsync();

            warehouseCount = warehouses.Count;
            categoryCount = categories.Count;
            unitCount = units.Count;

            activeWarehouses = warehouses.Count(w => w.IsActive);
            activeCategories = categories.Count(c => c.IsActive);
            activeUnits = units.Count(u => u.IsActive);

            inactiveWarehouses = warehouseCount - activeWarehouses;
            inactiveCategories = categoryCount - activeCategories;
            inactiveUnits = unitCount - activeUnits;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
}