@page "/company-dashboard/products"
@attribute [Authorize(Roles = "SystemUser")]
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IWarehouseService WarehouseService
@inject IUnitOfMeasureService UnitOfMeasureService
@inject IJSRuntime JS

<h3>Gestión de Productos</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateModal">Nuevo Producto</button>
</div>

@if (products == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Cargando productos...</p>
    </div>
}
else if (!products.Any())
{
    <div class="alert alert-info">
        No hay productos registrados. Crea tu primer producto para comenzar.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio Compra</th>
                    <th>Precio Venta</th>
                    <th>Stock Total</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Code</td>
                        <td>@product.Name</td>
                        <td>@product.Category?.Name</td>
                        <td>@product.PurchasePrice.ToString("C")</td>
                        <td>@product.SalePrice.ToString("C")</td>
                        <td>
                            <span class="badge @(product.TotalQuantity > 0 ? "bg-success" : "bg-danger")">
                                @product.TotalQuantity
                            </span>
                        </td>
                        <td>
                            @if (product.IsActive)
                            {
                                <span class="badge bg-success">Activo</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactivo</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditProduct(product)" title="Editar">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-info" @onclick="() => ManageInventory(product)" title="Inventario">
                                    <span class="oi oi-box"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProduct(product)" title="Eliminar">
                                    <span class="oi oi-trash"></span>
                                </button>
                               @*  <button class="btn btn-sm btn-outline-warning" @onclick="() => TransferProduct(product)" title="Transferir" disabled="@(product.ProductWarehouses.Count < 2)"> *@
                                <button class="btn btn-sm btn-outline-warning" @onclick="() => TransferProduct(product)" title="Transferir">
                                   <span class="oi oi-transfer"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShowTransferHistory(product)" title="Historial">
                                    <span class="oi oi-clock"></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Create Modal -->
@if (showCreateModal)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nuevo Producto</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@createRequest" OnValidSubmit="@CreateProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombre:</label>
                                    <InputText class="form-control" @bind-Value="createRequest.Name" />
                                    <ValidationMessage For="@(() => createRequest.Name)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Código:</label>
                                    <InputText class="form-control" @bind-Value="createRequest.Code" />
                                    <ValidationMessage For="@(() => createRequest.Code)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="createRequest.Description" />
                            <ValidationMessage For="@(() => createRequest.Description)" class="text-danger" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Precio Compra:</label>
                                    <InputNumber class="form-control" @bind-Value="createRequest.PurchasePrice" format="C" />
                                    <ValidationMessage For="@(() => createRequest.PurchasePrice)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Precio Venta:</label>
                                    <InputNumber class="form-control" @bind-Value="createRequest.SalePrice" format="C" />
                                    <ValidationMessage For="@(() => createRequest.SalePrice)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Categoría:</label>
                                    <InputSelect class="form-select" @bind-Value="createRequest.CategoryId">
                                        <option value="">Seleccionar categoría</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.CategoryId)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Unidad de Medida:</label>
                                    <InputSelect class="form-select" @bind-Value="createRequest.UnitOfMeasureId">
                                        <option value="">Seleccionar unidad</option>
                                        @foreach (var unit in unitOfMeasures)
                                        {
                                            <option value="@unit.Id">@unit.Name (@unit.Abbreviation)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.UnitOfMeasureId)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="createRequest.IsActive" />
                            <label class="form-check-label">Activo</label>
                        </div>

                        <h5 class="mt-4 mb-3">Inventario por Almacén</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Almacén</th>
                                        <th>Cantidad</th>
                                        <th>Stock Mínimo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var warehouse in warehouses)
                                    {
                                        var warehouseRequest = createRequest.Warehouses.FirstOrDefault(w => w.WarehouseId == warehouse.Id);
                                        if (warehouseRequest == null)
                                        {
                                            warehouseRequest = new ProductWarehouseRequest { WarehouseId = warehouse.Id };
                                            createRequest.Warehouses.Add(warehouseRequest);
                                        }

                                        <tr>
                                            <td>@warehouse.Name</td>
                                            <td>
                                                <InputNumber type="number" class="form-control form-control-sm"
                                                             @bind-Value="warehouseRequest.Quantity" min="0" step="0.01" />
                                            </td>
                                            <td>
                                                <InputNumber type="number" class="form-control form-control-sm"
                                                             @bind-Value="warehouseRequest.MinStock" min="0" step="0.01" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <span>Guardar</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Modal -->
@if (showEditModal && editingProduct != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Producto</h5>
                    <button type="button" class="btn-close" @onclick="HideEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editRequest" OnValidSubmit="@UpdateProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombre:</label>
                                    <InputText class="form-control" @bind-Value="editRequest.Name" />
                                    <ValidationMessage For="@(() => editRequest.Name)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Código:</label>
                                    <InputText class="form-control" @bind-Value="editRequest.Code" />
                                    <ValidationMessage For="@(() => editRequest.Code)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="editRequest.Description" />
                            <ValidationMessage For="@(() => editRequest.Description)" class="text-danger" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Precio Compra:</label>
                                    <InputNumber class="form-control" @bind-Value="editRequest.PurchasePrice" format="C" />
                                    <ValidationMessage For="@(() => editRequest.PurchasePrice)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Precio Venta:</label>
                                    <InputNumber class="form-control" @bind-Value="editRequest.SalePrice" format="C" />
                                    <ValidationMessage For="@(() => editRequest.SalePrice)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Categoría:</label>
                                    <InputSelect class="form-select" @bind-Value="editRequest.CategoryId">
                                        <option value="">Seleccionar categoría</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => editRequest.CategoryId)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Unidad de Medida:</label>
                                    <InputSelect class="form-select" @bind-Value="editRequest.UnitOfMeasureId">
                                        <option value="">Seleccionar unidad</option>
                                        @foreach (var unit in unitOfMeasures)
                                        {
                                            <option value="@unit.Id">@unit.Name (@unit.Abbreviation)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => editRequest.UnitOfMeasureId)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="editRequest.IsActive" />
                            <label class="form-check-label">Activo</label>
                        </div>

                        <h5 class="mt-4 mb-3">Inventario por Almacén</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Almacén</th>
                                        <th>Cantidad</th>
                                        <th>Stock Mínimo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var warehouse in warehouses)
                                    {
                                        var warehouseRequest = editRequest.Warehouses.FirstOrDefault(w => w.WarehouseId == warehouse.Id);
                                        if (warehouseRequest == null)
                                        {
                                            warehouseRequest = new ProductWarehouseRequest { WarehouseId = warehouse.Id };
                                            editRequest.Warehouses.Add(warehouseRequest);
                                        }

                                        <tr>
                                            <td>@warehouse.Name</td>
                                            <td>
                                                <InputNumber type="number" class="form-control form-control-sm"
                                                             @bind-Value="warehouseRequest.Quantity" min="0" step="0.01" />
                                            </td>
                                            <td>
                                                <InputNumber type="number" class="form-control form-control-sm"
                                                             @bind-Value="warehouseRequest.MinStock" min="0" step="0.01" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Actualizando...</span>
                            }
                            else
                            {
                                <span>Actualizar</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Inventory Modal -->
@if (showInventoryModal && inventoryProduct != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Gestionar Inventario - @inventoryProduct.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideInventoryModal"></button>
                </div>
                <div class="modal-body">
                    @if (productWarehouses == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Cargando inventario...</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Almacén</th>
                                        <th>Cantidad</th>
                                        <th>Stock Mínimo</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pw in productWarehouses)
                                    {
                                        <tr>
                                            <td>@pw.Warehouse?.Name</td>
                                            <td>@pw.Quantity</td>
                                            <td>@pw.MinStock</td>
                                            <td>
                                                @if (pw.Quantity >= pw.MinStock)
                                                {
                                                    <span class="badge bg-success">OK</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">Bajo</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditWarehouseInventory(pw)" title="Editar">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Warehouse Inventory Modal -->
@if (showEditWarehouseModal && editingWarehouseInventory != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Inventario - @editingWarehouseInventory.Warehouse?.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideEditWarehouseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editWarehouseRequest" OnValidSubmit="@UpdateWarehouseInventory">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Cantidad:</label>
                            <InputNumber type="number" class="form-control" @bind-Value="editWarehouseRequest.Quantity" min="0" step="0.01" />
                            <ValidationMessage For="@(() => editWarehouseRequest.Quantity)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Stock Mínimo:</label>
                            <InputNumber type="number" class="form-control" @bind-Value="editWarehouseRequest.MinStock" min="0" step="0.01" />
                            <ValidationMessage For="@(() => editWarehouseRequest.MinStock)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Actualizando...</span>
                            }
                            else
                            {
                                <span>Actualizar</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


<!-- Transfer Modal -->
@if (showTransferModal && transferProduct != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Transferir Producto - @transferProduct.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideTransferModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Stock Disponible por Almacén:</label>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Almacén</th>
                                        <th>Stock</th>
                                        <th>Mínimo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pw in transferProduct.ProductWarehouses)
                                    {
                                        <tr>
                                            <td>@pw.Warehouse?.Name</td>
                                            <td>@pw.Quantity</td>
                                            <td>@pw.MinStock</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <EditForm Model="@transferRequest" OnValidSubmit="@TransferProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Desde Almacén:</label>
                            <InputSelect class="form-select" @bind-Value="transferRequest.FromWarehouseId" @onchange="UpdateAvailableStock">
                                <option value="">Seleccionar almacén</option>
                                @foreach (var pw in transferProduct.ProductWarehouses.Where(pw => pw.Quantity > 0))
                                {
                                    <option value="@pw.WarehouseId">@pw.Warehouse?.Name (@pw.Quantity disponible)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => transferRequest.FromWarehouseId)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Hacia Almacén:</label>
                            <InputSelect class="form-select" @bind-Value="transferRequest.ToWarehouseId">
                                <option value="">Seleccionar almacén</option>
                                @foreach (var warehouse in warehouses.Where(w => w.Id != transferRequest.FromWarehouseId))
                                {
                                    <option value="@warehouse.Id">@warehouse.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => transferRequest.ToWarehouseId)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Cantidad a Transferir:</label>
                            <InputNumber type="number" class="form-control" @bind-Value="transferRequest.Quantity" min="0.01" max="@availableStock" step="0.01" />
                            <ValidationMessage For="@(() => transferRequest.Quantity)" class="text-danger" />
                            <small class="text-muted">Stock disponible: @availableStock</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notas (opcional):</label>
                            <InputTextArea class="form-control" @bind-Value="transferRequest.Notes" />
                            <ValidationMessage For="@(() => transferRequest.Notes)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Transferiendo...</span>
                            }
                            else
                            {
                                <span>Transferir</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Transfer History Modal -->
@if (showTransferHistoryModal && historyProduct != null)
{
    <div class="modal d-block show" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Historial de Transferencias - @historyProduct.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideTransferHistoryModal"></button>
                </div>
                <div class="modal-body">
                    @if (productTransfers == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Cargando historial...</p>
                        </div>
                    }
                    else if (!productTransfers.Any())
                    {
                        <div class="alert alert-info">
                            No hay transferencias registradas para este producto.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Fecha</th>
                                        <th>Desde</th>
                                        <th>Hacia</th>
                                        <th>Cantidad</th>
                                        <th>Estado</th>
                                        <th>Notas</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transfer in productTransfers)
                                    {
                                        <tr>
                                            <td>@transfer.TransferDate.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>@transfer.FromWarehouse?.Name</td>
                                            <td>@transfer.ToWarehouse?.Name</td>
                                            <td>@transfer.Quantity</td>
                                            <td>
                                                @if (transfer.Status == "Completed")
                                                {
                                                    <span class="badge bg-success">Completada</span>
                                                }
                                                else if (transfer.Status == "Pending")
                                                {
                                                    <span class="badge bg-warning">Pendiente</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Cancelada</span>
                                                }
                                            </td>
                                            <td>@transfer.Notes</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductDto> products = new();
    private List<CategoryDto> categories = new();
    private List<WarehouseDto> warehouses = new();
    private List<UnitOfMeasureDto> unitOfMeasures = new();
    private List<ProductWarehouseDto> productWarehouses = new();

    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showInventoryModal = false;
    private bool showEditWarehouseModal = false;
    private bool isSubmitting = false;

    private CreateProductRequest createRequest = new();
    private ProductDto? editingProduct;
    private UpdateProductRequest editRequest = new();
    private ProductDto? inventoryProduct;
    private ProductWarehouseDto? editingWarehouseInventory;
    private UpdateProductWarehouseRequest editWarehouseRequest = new();

    // Variables para transferencias
    private bool showTransferModal = false;
    private bool showTransferHistoryModal = false;
    private ProductDto? transferProduct;
    private ProductDto? historyProduct;
    private List<ProductTransferDto> productTransfers = new();
    private CreateProductTransferRequest transferRequest = new();
    private decimal availableStock = 0;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            products = await ProductService.GetProductsAsync();
            categories = await CategoryService.GetCategoriesAsync();
            warehouses = await WarehouseService.GetWarehousesAsync();
            unitOfMeasures = await UnitOfMeasureService.GetUnitOfMeasuresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void ShowCreateModal()
    {
        createRequest = new CreateProductRequest();
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private async Task CreateProduct()
    {
        isSubmitting = true;
        try
        {
            var result = await ProductService.CreateProductAsync(createRequest);
            showCreateModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void EditProduct(ProductDto product)
    {
        editingProduct = product;
        editRequest = new UpdateProductRequest
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Code = product.Code,
            PurchasePrice = product.PurchasePrice,
            SalePrice = product.SalePrice,
            CategoryId = product.CategoryId,
            UnitOfMeasureId = product.UnitOfMeasureId,
            IsActive = product.IsActive,
            Warehouses = product.ProductWarehouses.Select(pw => new ProductWarehouseRequest
            {
                WarehouseId = pw.WarehouseId,
                Quantity = pw.Quantity,
                MinStock = pw.MinStock
            }).ToList()
        };
        showEditModal = true;
    }

    private void HideEditModal()
    {
        showEditModal = false;
    }

    private async Task UpdateProduct()
    {
        isSubmitting = true;
        try
        {
            var result = await ProductService.UpdateProductAsync(editRequest);
            if (result != null)
            {
                showEditModal = false;
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el producto '{product.Name}'?"))
        {
            try
            {
                var success = await ProductService.DeleteProductAsync(product.Id);
                if (success)
                {
                    await LoadData();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting product: {ex.Message}");
            }
        }
    }

    private async Task ManageInventory(ProductDto product)
    {
        inventoryProduct = product;
        showInventoryModal = true;

        try
        {
            productWarehouses = await ProductService.GetProductWarehousesAsync(product.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product warehouses: {ex.Message}");
        }
    }

    private void HideInventoryModal()
    {
        showInventoryModal = false;
    }

    private void EditWarehouseInventory(ProductWarehouseDto productWarehouse)
    {
        editingWarehouseInventory = productWarehouse;
        editWarehouseRequest = new UpdateProductWarehouseRequest
        {
            Id = productWarehouse.Id,
            Quantity = productWarehouse.Quantity,
            MinStock = productWarehouse.MinStock
        };
        showEditWarehouseModal = true;
    }

    private void HideEditWarehouseModal()
    {
        showEditWarehouseModal = false;
    }

    private async Task UpdateWarehouseInventory()
    {
        isSubmitting = true;
        try
        {
            var result = await ProductService.UpdateProductWarehouseAsync(editWarehouseRequest);
            if (result != null)
            {
                showEditWarehouseModal = false;

                // Refresh product warehouses
                if (inventoryProduct != null)
                {
                    productWarehouses = await ProductService.GetProductWarehousesAsync(inventoryProduct.Id);
                }

                // Refresh products list
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating warehouse inventory: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
    private void TransferProduct(ProductDto product)
    {
        transferProduct = product;
        transferRequest = new CreateProductTransferRequest
        {
            ProductId = product.Id,
            TransferDate = DateTime.UtcNow
        };
        availableStock = 0;
        showTransferModal = true;
    }

    private void HideTransferModal()
    {
        showTransferModal = false;
    }

    private void UpdateAvailableStock(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int warehouseId))
        {
            var warehouse = transferProduct?.ProductWarehouses.FirstOrDefault(pw => pw.WarehouseId == warehouseId);
            availableStock = warehouse?.Quantity ?? 0;
        }
    }

    private async Task TransferProduct()
    {
        isSubmitting = true;
        try
        {
            var success = await ProductService.TransferProductAsync(transferRequest);
            if (success)
            {
                showTransferModal = false;
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error transferring product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ShowTransferHistory(ProductDto product)
    {
        historyProduct = product;
        showTransferHistoryModal = true;

        try
        {
            productTransfers = await ProductService.GetProductTransfersAsync(product.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transfer history: {ex.Message}");
        }
    }

    private void HideTransferHistoryModal()
    {
        showTransferHistoryModal = false;
    }
}
