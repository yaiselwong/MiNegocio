@page "/register"
@using MiNegocio.Client.Shared.Interfaces
@using MiNegocio.Client.Shared.Services
@using MiNegocio.Shared.Dto.Request
@using MiNegocio.Shared.Models
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IAdminService AdminService

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body">
                <h3 class="card-title text-center mb-4">Register</h3>

                <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username:</label>
                        <InputText id="username" class="form-control" @bind-Value="registerRequest.Username" />
                        <ValidationMessage For="@(() => registerRequest.Username)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" />
                        <ValidationMessage For="@(() => registerRequest.Email)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="registerRequest.Password" />
                        <ValidationMessage For="@(() => registerRequest.Password)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="company" class="form-label">Company:</label>
                        <InputSelect id="company" class="form-select" @bind-Value="registerRequest.CompanyId">
                            <option value="">Select Company</option>
                            @foreach (var company in companies)
                            {
                                <option value="@company.Id">@company.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Registering...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3">
                        @successMessage
                    </div>
                }

                <div class="text-center mt-3">
                    <a href="/login">Already have an account? Login here</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private List<Company> companies = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            companies = await AdminService.GetAllCompaniesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load companies: {ex.Message}";
        }
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var user = new User
            {
                Username = registerRequest.Username,
                Email = registerRequest.Email,
                Role = UserRole.SystemUser,
                CompanyId = registerRequest.CompanyId
            };

            var success = await AuthStateProvider.RegisterAsync(user, registerRequest.Password);

            if (success)
            {
                successMessage = "Registration successful! Please login.";
                registerRequest = new();
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}